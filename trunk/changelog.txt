v1.0.3 版本更新功能
1、项目配置文件中增加isEnabled属性。
2、系统不会加载已禁用的项目配置（isEnabled='false'）。
2、禁用的项目配置不允许被其他项目所继承。 

v1.0.2 版本更新功能
1、增加一个简单而强大的列模型处理接口ColumnHandler，这些接口在生成表模型并设置好列模型的数据后被调用作后期处理。譬如：
	1）实现基于不同编程语言的数据列的类型转换需求。
	2）如果项目使用的是Oracle数据库，则可以增加一个额外的列模型处理器，处理Oracle的大写列名以增强列名称的可读性
2、去掉原来的数据类型转换接口DataTypeConverter，实现该接口的统一改为实现列模型处理接口ColumnHandler
3、修改DataTypeConverterForCS类，统一实现列模型处理接口ColumnHandler，完成从JDBC数据类型到C#编程语言的类型转换
4、修改DataTypeConverterForJava类，统一实现列模型处理接口ColumnHandler，完成从JDBC数据类型到Java编程语言的类型转换
5、列模型中增加对所归属的TableModel的引用属性。

v1.0.1 版本主要功能
1、采用freemarker的构建公式：数据模型+模板=输出，默认使用freeMarker模板引擎来生成代码，但可以通过Builder接口实现其他构建方式。
2、核心数据模型TableModel基于JDBC实现表元数据及其所有字段列的相关元数据信息的封装。
3、数据模型TableModel基于JDBC实现，可以取得大部分元数据信息，个别信息的取得与具体数据库方言有关，可以通过扩展DbProvider来实现。
4、通过实现接口DataTypeConverter，可以完成JDBC数据类型到各种编程语言的类型转换操作。
5、通过配置可以动态增加或重定义数据模型，并可以被后面的数据模型通过模板语言引用或组装。
6、构建时指定的模板可以是一段文本字符串，也可以是一个文件路径，并且它们的内容里都可以引用已定义的数据模型。
7、构建时指定的输出类型可以是文本，也可以是文件，指定的文件输出路径也可以引用数据模型变量。
8、项目配置引入继承机制，这样就可以引用在父类配置中已定义的数据模型，以及其他配置信息。
9、项目配置信息可以分开多个配置文件存放，codgen一次性加载到缓存里，这样可以提高配置信息的访问效率。



